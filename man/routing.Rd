% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/route.R
\name{routing}
\alias{route}
\alias{routing}
\title{Routing}
\usage{
route(method, path, handler)
}
\arguments{
\item{method}{A character string specifying an HTTP method(s), such as 
\code{"get"}, \code{"post"}, or \code{"put"}, case-insensitive.}

\item{path}{A character string specifying which URI the route will handle.}

\item{handler}{A function whose return value is an object of class
\code{response} object, see details below.}
}
\value{
A route object.
}
\description{
Within prairie, a route is thought of as \emph{a mapping between any number 
of methods, specified by} \code{method}\emph{, and a URI,} \code{path}. A 
route is never assigned more than a single path. However, because \code{path}
is treated as a \link[base:regex]{regular expression} a single route could
match many different client requests.
}
\details{
\strong{\code{method}}

\code{method} is a character vector with at least one element. Multiple 
methods may be specified or if \code{"all"} is specified then all HTTP 
methods are accepted. Custom methods are possible, but not advised.

\code{method} is converted to lower case, so \code{"GET"} and \code{"get"}
are equivalent.

\strong{\code{path}}

\code{path} may be a regular expression. \code{path} never needs to include a
beginning \code{/}. The root of a web application is specified by \code{^$}. 
If \code{path} is a regular expression capture groups may be used to extract 
substrings.

For example, if \code{path} is 
\tabular{c}{\code{"^wizard/(?<alias>[a-z]+)/([a-z]+)$"}} and the application 
receives a request for \tabular{c}{\code{/wizard/sparrowhawk/ged}} then 
\code{args} would be the character vector \tabular{c}{\code{c("alias" =
"sparrowhawk", "" = "ged")}} during evaluation of \code{handler}. See
next section for details about \code{args} and \code{handler}.

\strong{\code{handler}}

\code{handler} is a function with an optional argument \code{args}, may be 
included. If \code{path} is a regular expression with capture groups the 
captured values are passed as \code{args} to \code{handler}. \code{args} will
always be a character vector. Values in \code{args} are ordered according to 
the order of the capture groups in \code{path} from left to right. If 
\code{path} does not contain a capture group and \code{handler} includes 
\code{args} as a parameter, then the value of \code{args} will be
\code{character(0)}.
}
\examples{
# typically, route() is called inside of 
# app(), but creation of standalone route 
# objects is possible

# accepts only GET requests
# path has capture groups, include args
route(
  'get',
  '^transformers/(?<series>[a-z_]+)$',
  function(args) {
    res <- response()
    
    if (args['series'] == 'beast_wars') {
      body(res) <- 'Right on!'
    } else {
      body(res) <- 'I can dig that.'
    }
    
    res
  }
)

# accepts both GET and POST requests
# no capture groups, no need for args
route(
  c('get', 'post'),
  '^blog/comments$',
  function() {
    req <- request()
    res <- response()
    
    if (method(req) == 'get') {
      body(res) <- 'Get your own comments!'
    } else {
      body(res) <- 'Thanks for commenting'
    }
    
    res
  }
)
}
\seealso{
\code{\link{request}}, \code{\link{response}}
}

